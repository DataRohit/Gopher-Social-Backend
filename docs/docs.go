// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Rohit Vilas Ingole",
            "email": "rohit.vilas.ingole@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://github.com/DataRohit/Gopher-Social-Backend/blob/master/license"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Logs in an existing user and returns access and refresh tokens as secure cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Request Body for User Login",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to login user",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user to the platform",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Request Body for User Registration",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to register user",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/postgres": {
            "get": {
                "description": "Check if Postgres connection is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Postgres Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to Postgres",
                        "schema": {
                            "$ref": "#/definitions/models.PostgresHealthyResponse"
                        }
                    },
                    "503": {
                        "description": "Failed to connect to Postgres",
                        "schema": {
                            "$ref": "#/definitions/models.PostgresUnhealthyResponse"
                        }
                    }
                }
            }
        },
        "/health/redis": {
            "get": {
                "description": "Check if Redis connection is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Redis Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to Redis",
                        "schema": {
                            "$ref": "#/definitions/models.RedisHealthyResponse"
                        }
                    },
                    "503": {
                        "description": "Failed to connect to Redis",
                        "schema": {
                            "$ref": "#/definitions/models.RedisUnhealthyResponse"
                        }
                    }
                }
            }
        },
        "/health/router": {
            "get": {
                "description": "Check if the router is working",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Router Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to router",
                        "schema": {
                            "$ref": "#/definitions/models.RouterHealthyResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.PostgresHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Postgres Healthy!"
                }
            }
        },
        "models.PostgresUnhealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Postgres Unhealthy!"
                }
            }
        },
        "models.RedisHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Redis Healthy!"
                }
            }
        },
        "models.RedisUnhealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Redis Unhealthy!"
                }
            }
        },
        "models.RouterHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Router Healthy!"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "banned": {
                    "type": "boolean",
                    "example": false
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-25T07:00:00+05:30"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "followers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "following": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "timeout_until": {
                    "type": "string",
                    "example": "2024-03-15T10:00:00+05:30"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-25T07:00:00+05:30"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.UserLoginErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserLoginPayload": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "john_doe / john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                }
            }
        },
        "models.UserLoginSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User logged in successfully"
                }
            }
        },
        "models.UserRegisterErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserRegisterPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "models.UserRegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User registered successfully"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Gopher Social API",
	Description:      "This is the API for Gopher Social, a social media platform for Gophers.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
