// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Rohit Vilas Ingole",
            "email": "rohit.vilas.ingole@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://github.com/DataRohit/Gopher-Social-Backend/blob/master/license"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/activate": {
            "get": {
                "description": "Activates a user account using the activation token from the query parameter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully activated user account",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired activation token",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to activate user account",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "Initiates the forgot password flow by generating a reset link and sending it to the user's email if the user exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Initiate forgot password flow",
                "parameters": [
                    {
                        "description": "Request Body for Forgot Password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully initiated forgot password flow",
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to initiate forgot password flow",
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Logs in an existing user and returns access and refresh tokens as secure cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Request Body for User Login",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Account not activated",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to login user",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logs out the current user by clearing access and refresh tokens.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "$ref": "#/definitions/models.UserLogoutSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/models.UserLogoutErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user to the platform",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Request Body for User Registration",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to register user",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/resend-activation-link": {
            "post": {
                "description": "Resends the activation link to the user's email if the user exists and is not already active.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Resend Activation Link",
                "parameters": [
                    {
                        "description": "Request Body for Resending Activation Link",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully resent activation link",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already active",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to resend activation link",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Resets the user's password using the provided reset token in query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Request Body for Reset Password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully reset password",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired reset token",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to reset password",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/postgres": {
            "get": {
                "description": "Check if Postgres connection is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Postgres Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to Postgres",
                        "schema": {
                            "$ref": "#/definitions/models.PostgresHealthyResponse"
                        }
                    },
                    "503": {
                        "description": "Failed to connect to Postgres",
                        "schema": {
                            "$ref": "#/definitions/models.PostgresUnhealthyResponse"
                        }
                    }
                }
            }
        },
        "/health/redis": {
            "get": {
                "description": "Check if Redis connection is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Redis Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to Redis",
                        "schema": {
                            "$ref": "#/definitions/models.RedisHealthyResponse"
                        }
                    },
                    "503": {
                        "description": "Failed to connect to Redis",
                        "schema": {
                            "$ref": "#/definitions/models.RedisUnhealthyResponse"
                        }
                    }
                }
            }
        },
        "/health/router": {
            "get": {
                "description": "Check if the router is working",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Router Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to router",
                        "schema": {
                            "$ref": "#/definitions/models.RouterHealthyResponse"
                        }
                    }
                }
            }
        },
        "/profile/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the profile of the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Request Body for Profile Update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfilePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated profile",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update profile",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ActivateUserErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ActivateUserSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Activated Successfully."
                }
            }
        },
        "models.ForgotPasswordErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ForgotPasswordPayload": {
            "type": "object",
            "required": [
                "identifier"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "john_doe / john.doe@example.com"
                }
            }
        },
        "models.ForgotPasswordSuccessResponse": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string",
                    "example": "http://localhost:8080/api/v1/reset-password?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg"
                },
                "message": {
                    "type": "string",
                    "example": "Password Reset Link Sent Successfully If User Exists."
                }
            }
        },
        "models.PostgresHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Postgres Healthy!"
                }
            }
        },
        "models.PostgresUnhealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Postgres Unhealthy!"
                }
            }
        },
        "models.Profile": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "github": {
                    "type": "string",
                    "example": "https://github.com/john_doe"
                },
                "google_scholar": {
                    "type": "string",
                    "example": "https://scholar.google.com/citations?user=xxxxxxxxxxxxx"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "linkedin": {
                    "type": "string",
                    "example": "https://linkedin.com/in/john_doe"
                },
                "twitter": {
                    "type": "string",
                    "example": "https://twitter.com/john_doe"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "website": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "models.RedisHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Redis Healthy!"
                }
            }
        },
        "models.RedisUnhealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Redis Unhealthy!"
                }
            }
        },
        "models.ResendActivationLinkErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ResendActivationLinkPayload": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "john_doe / john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                }
            }
        },
        "models.ResendActivationLinkSuccessResponse": {
            "type": "object",
            "properties": {
                "activation_link": {
                    "type": "string",
                    "example": "http://localhost:8080/api/v1/auth/activate?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg"
                },
                "message": {
                    "type": "string",
                    "example": "Activation Link Sent Successfully."
                }
            }
        },
        "models.ResetPasswordErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ResetPasswordPayload": {
            "type": "object",
            "required": [
                "confirm_password",
                "new_password"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "example": "NewP@$$wOrd"
                },
                "new_password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "NewP@$$wOrd"
                }
            }
        },
        "models.ResetPasswordSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Password Reset Successfully."
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Normal User"
                },
                "level": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.RouterHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Router Healthy!"
                }
            }
        },
        "models.UpdateProfileErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateProfilePayload": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "github": {
                    "type": "string",
                    "example": "https://github.com/john_doe"
                },
                "google_scholar": {
                    "type": "string",
                    "example": "https://scholar.google.com/citations?user=xxxxxxxxxxxxx"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "linkedin": {
                    "type": "string",
                    "example": "https://linkedin.com/in/john_doe"
                },
                "twitter": {
                    "type": "string",
                    "example": "https://twitter.com/john_doe"
                },
                "website": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "models.UpdateProfileSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Profile Updated Successfully"
                },
                "profile": {
                    "$ref": "#/definitions/models.Profile"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "banned": {
                    "type": "boolean",
                    "example": false
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "followers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "following": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_active": {
                    "type": "boolean",
                    "example": false
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "timeout_until": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.UserLoginErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserLoginPayload": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "john_doe / john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                }
            }
        },
        "models.UserLoginSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Logged In Successfully"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.UserLogoutErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Not Logged In"
                }
            }
        },
        "models.UserLogoutSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logout Successful"
                }
            }
        },
        "models.UserRegisterErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserRegisterPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "models.UserRegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "activation_link": {
                    "type": "string",
                    "example": "http://localhost:8080/api/v1/auth/activate?token=xxxxxxxx"
                },
                "message": {
                    "type": "string",
                    "example": "User Registered Successfully"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Gopher Social API",
	Description:      "This is the API for Gopher Social, a social media platform for Gophers.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
