{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for Gopher Social, a social media platform for Gophers.",
        "title": "Gopher Social API",
        "contact": {
            "name": "Rohit Vilas Ingole",
            "email": "rohit.vilas.ingole@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://github.com/DataRohit/Gopher-Social-Backend/blob/master/license"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth/activate": {
            "get": {
                "description": "Activates a user account using the activation token from the query parameter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully activated user account",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired activation token",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to activate user account",
                        "schema": {
                            "$ref": "#/definitions/models.ActivateUserErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "Initiates the forgot password flow by generating a reset link and sending it to the user's email if the user exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Initiate forgot password flow",
                "parameters": [
                    {
                        "description": "Request Body for Forgot Password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully initiated forgot password flow",
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to initiate forgot password flow",
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Logs in an existing user and returns access and refresh tokens as secure cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Request Body for User Login",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Account not activated",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to login user",
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logs out the current user by clearing access and refresh tokens.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "$ref": "#/definitions/models.UserLogoutSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/models.UserLogoutErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user to the platform",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Request Body for User Registration",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to register user",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/resend-activation-link": {
            "post": {
                "description": "Resends the activation link to the user's email if the user exists and is not already active.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Resend Activation Link",
                "parameters": [
                    {
                        "description": "Request Body for Resending Activation Link",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully resent activation link",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - User already active",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to resend activation link",
                        "schema": {
                            "$ref": "#/definitions/models.ResendActivationLinkErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Resets the user's password using the provided reset token in query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Request Body for Reset Password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully reset password",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired reset token",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to reset password",
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/postgres": {
            "get": {
                "description": "Check if Postgres connection is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Postgres Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to Postgres",
                        "schema": {
                            "$ref": "#/definitions/models.PostgresHealthyResponse"
                        }
                    },
                    "503": {
                        "description": "Failed to connect to Postgres",
                        "schema": {
                            "$ref": "#/definitions/models.PostgresUnhealthyResponse"
                        }
                    }
                }
            }
        },
        "/health/redis": {
            "get": {
                "description": "Check if Redis connection is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Redis Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to Redis",
                        "schema": {
                            "$ref": "#/definitions/models.RedisHealthyResponse"
                        }
                    },
                    "503": {
                        "description": "Failed to connect to Redis",
                        "schema": {
                            "$ref": "#/definitions/models.RedisUnhealthyResponse"
                        }
                    }
                }
            }
        },
        "/health/router": {
            "get": {
                "description": "Check if the router is working",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Router Health Check",
                "responses": {
                    "200": {
                        "description": "Successfully connected to router",
                        "schema": {
                            "$ref": "#/definitions/models.RouterHealthyResponse"
                        }
                    }
                }
            }
        },
        "/post/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new post by a logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "description": "Request Body for creating a post",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePostPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created post",
                        "schema": {
                            "$ref": "#/definitions/models.CreatePostSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.CreatePostErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.CreatePostErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.CreatePostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to create post",
                        "schema": {
                            "$ref": "#/definitions/models.CreatePostErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/disliked": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of posts disliked by the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "List disliked posts of logged-in user",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of disliked posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch disliked posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/liked": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of posts liked by the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "List liked posts of logged-in user",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of liked posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch liked posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of posts created by the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "List posts of logged-in user",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of user's posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListMyPostsSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.ListMyPostsErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch user's posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListMyPostsErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/user/{identifier}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of posts created by a user identified by username, email, or user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "List posts by user identifier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID)",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of user's posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListUserPostsSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ListUserPostsErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.ListUserPostsErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ListUserPostsErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch user's posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListUserPostsErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/user/{identifier}/disliked": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of posts disliked by a user, identified by username, email, or user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "List disliked posts of a user by identifier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID)",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of disliked posts for user",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch disliked posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListDislikedPostsErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/user/{identifier}/liked": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of posts liked by a user, identified by username, email, or user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "List liked posts of a user by identifier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID)",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of liked posts for user",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch liked posts",
                        "schema": {
                            "$ref": "#/definitions/models.ListLikedPostsErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/{postID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a post by its ID. Any logged-in user can access this route.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get a post by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID to be retrieved",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved post",
                        "schema": {
                            "$ref": "#/definitions/models.GetPostSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.GetPostErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.GetPostErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Post not found",
                        "schema": {
                            "$ref": "#/definitions/models.GetPostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to get post",
                        "schema": {
                            "$ref": "#/definitions/models.GetPostErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing post by its ID. Only the author can update the post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update an existing post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID to be updated",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request Body for updating a post",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePostPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated post",
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePostSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePostErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePostErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not the author or account is inactive/banned",
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePostErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Post not found",
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update post",
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePostErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing post by its ID. Only the author can delete the post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete an existing post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID to be deleted",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted post",
                        "schema": {
                            "$ref": "#/definitions/models.DeletePostSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.DeletePostErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not the author or account is inactive/banned",
                        "schema": {
                            "$ref": "#/definitions/models.DeletePostErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Post not found",
                        "schema": {
                            "$ref": "#/definitions/models.DeletePostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to delete post",
                        "schema": {
                            "$ref": "#/definitions/models.DeletePostErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/{postID}/comment/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new comment on a post. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Create a new comment on a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCommentPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateCommentSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.CreateCommentErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.CreateCommentErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.CreateCommentErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/{postID}/dislike": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to dislike a post by post identifier (postID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "Dislike a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post Identifier (Post ID)",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully disliked post",
                        "schema": {
                            "$ref": "#/definitions/models.DislikePostSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.DislikePostErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.DislikePostErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.DislikePostErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Post not found",
                        "schema": {
                            "$ref": "#/definitions/models.DislikePostErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - Already disliked post",
                        "schema": {
                            "$ref": "#/definitions/models.DislikePostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to dislike post",
                        "schema": {
                            "$ref": "#/definitions/models.DislikePostErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/{postID}/like": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to like a post by post identifier (postID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "Like a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post Identifier (Post ID)",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully liked post",
                        "schema": {
                            "$ref": "#/definitions/models.LikePostSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.LikePostErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.LikePostErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.LikePostErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Post not found",
                        "schema": {
                            "$ref": "#/definitions/models.LikePostErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - Already liked post",
                        "schema": {
                            "$ref": "#/definitions/models.LikePostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to like post",
                        "schema": {
                            "$ref": "#/definitions/models.LikePostErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to unlike a post by post identifier (postID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "Unlike a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post Identifier (Post ID)",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unliked post",
                        "schema": {
                            "$ref": "#/definitions/models.UnlikePostSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UnlikePostErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.UnlikePostErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.UnlikePostErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Post not found or like not found",
                        "schema": {
                            "$ref": "#/definitions/models.UnlikePostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to unlike post",
                        "schema": {
                            "$ref": "#/definitions/models.UnlikePostErrorResponse"
                        }
                    }
                }
            }
        },
        "/post/{postID}/undislike": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to undislike a post by post identifier (postID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post_likes"
                ],
                "summary": "Undislike a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post Identifier (Post ID)",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully undisliked post",
                        "schema": {
                            "$ref": "#/definitions/models.UndislikePostSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UndislikePostErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.UndislikePostErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.UndislikePostErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Post not found or dislike not found",
                        "schema": {
                            "$ref": "#/definitions/models.UndislikePostErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to undislike post",
                        "schema": {
                            "$ref": "#/definitions/models.UndislikePostErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile of the currently logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get logged-in user profile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved profile",
                        "schema": {
                            "$ref": "#/definitions/models.GetLoggedInUserProfileSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.GetLoggedInUserProfileErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.GetLoggedInUserProfileErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Profile not found for the logged-in user",
                        "schema": {
                            "$ref": "#/definitions/models.GetLoggedInUserProfileErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to get profile",
                        "schema": {
                            "$ref": "#/definitions/models.GetLoggedInUserProfileErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the profile of the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Request Body for Profile Update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfilePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated profile",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update profile",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProfileErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/{identifier}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile of a user by their identifier (username, email, or user ID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get user profile by identifier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID)",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved profile",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserProfileSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid identifier format",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserProfileErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserProfileErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned or requested user is banned",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserProfileErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Profile not found for the given identifier",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserProfileErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to get profile",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserProfileErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/follow/{identifier}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to follow another user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_follow"
                ],
                "summary": "Follow a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID) of the followee",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully followed user",
                        "schema": {
                            "$ref": "#/definitions/models.FollowUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.FollowUserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.FollowUserErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.FollowUserErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Followee user not found",
                        "schema": {
                            "$ref": "#/definitions/models.FollowUserErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - Already following user",
                        "schema": {
                            "$ref": "#/definitions/models.FollowUserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to follow user",
                        "schema": {
                            "$ref": "#/definitions/models.FollowUserErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/followers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of users who are following the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_follow"
                ],
                "summary": "List followers of logged-in user",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved followers list",
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowersSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowersErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch followers",
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowersErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/following": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of users that the logged-in user is following.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_follow"
                ],
                "summary": "List users being followed by logged-in user",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved following list",
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowingSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowingErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch following users",
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowingErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/unfollow/{identifier}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to unfollow another user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_follow"
                ],
                "summary": "Unfollow a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID) of the followee",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unfollowed user",
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowUserErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowUserErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User account is inactive or banned",
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowUserErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Followee user not found or not following",
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowUserErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to unfollow user",
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowUserErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{identifier}/followers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of users who are following the user identified by identifier.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_follow"
                ],
                "summary": "List followers of a user by identifier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID) of the user",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved followers list for user",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowersSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowersErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowersErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowersErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch followers",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowersErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{identifier}/following": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of users that the user identified by identifier is following.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_follow"
                ],
                "summary": "List users being followed by a user by identifier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Identifier (username, email, or user ID) of the user",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved following list for user",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowingSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowingErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in or invalid token",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowingErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowingErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to fetch following users",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserFollowingErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ActivateUserErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ActivateUserSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Activated Successfully"
                }
            }
        },
        "models.Comment": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/models.User"
                },
                "content": {
                    "type": "string",
                    "example": "This is a comment content"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "post": {
                    "$ref": "#/definitions/models.Post"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                }
            }
        },
        "models.CreateCommentErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.CreateCommentPayload": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1,
                    "example": "This is a comment content"
                }
            }
        },
        "models.CreateCommentSuccessResponse": {
            "type": "object",
            "properties": {
                "comment": {
                    "$ref": "#/definitions/models.Comment"
                },
                "message": {
                    "type": "string",
                    "example": "Comment Created Successfully"
                }
            }
        },
        "models.CreatePostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.CreatePostPayload": {
            "type": "object",
            "required": [
                "content",
                "title"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "This is the main content of my post."
                },
                "description": {
                    "type": "string",
                    "example": "A brief description of the post."
                },
                "sub_title": {
                    "type": "string",
                    "example": "A Catchy Subtitle"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3,
                    "example": "My Awesome Post"
                }
            }
        },
        "models.CreatePostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Created Successfully"
                },
                "post": {
                    "$ref": "#/definitions/models.Post"
                }
            }
        },
        "models.DeletePostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.DeletePostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Deleted Successfully"
                }
            }
        },
        "models.DislikePostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.DislikePostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Disliked Successfully"
                }
            }
        },
        "models.FollowUserErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.FollowUserSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Followed Successfully"
                }
            }
        },
        "models.ForgotPasswordErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ForgotPasswordPayload": {
            "type": "object",
            "required": [
                "identifier"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "john_doe / john.doe@example.com"
                }
            }
        },
        "models.ForgotPasswordSuccessResponse": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string",
                    "example": "http://localhost:8080/api/v1/reset-password?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg"
                },
                "message": {
                    "type": "string",
                    "example": "Password Reset Link Sent Successfully If User Exists"
                }
            }
        },
        "models.GetFollowersErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetFollowersSuccessResponse": {
            "type": "object",
            "properties": {
                "followers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Followers Retrieved Successfully"
                }
            }
        },
        "models.GetFollowingErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetFollowingSuccessResponse": {
            "type": "object",
            "properties": {
                "following": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Following Users Retrieved Successfully"
                }
            }
        },
        "models.GetLoggedInUserProfileErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetLoggedInUserProfileSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Profile Retrieved Successfully"
                },
                "profile": {
                    "$ref": "#/definitions/models.Profile"
                }
            }
        },
        "models.GetPostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetPostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Retrieved Successfully"
                },
                "post": {
                    "$ref": "#/definitions/models.Post"
                }
            }
        },
        "models.GetUserFollowersErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetUserFollowersSuccessResponse": {
            "type": "object",
            "properties": {
                "followers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User Followers Retrieved Successfully"
                }
            }
        },
        "models.GetUserFollowingErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetUserFollowingSuccessResponse": {
            "type": "object",
            "properties": {
                "following": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User Following Users Retrieved Successfully"
                }
            }
        },
        "models.GetUserProfileErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GetUserProfileSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Profile Retrieved Successfully"
                },
                "profile": {
                    "$ref": "#/definitions/models.Profile"
                }
            }
        },
        "models.LikePostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.LikePostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Liked Successfully"
                }
            }
        },
        "models.ListDislikedPostsErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ListDislikedPostsSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Disliked Posts Retrieved Successfully"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Post"
                    }
                }
            }
        },
        "models.ListLikedPostsErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ListLikedPostsSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Liked Posts Retrieved Successfully"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Post"
                    }
                }
            }
        },
        "models.ListMyPostsErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ListMyPostsSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Posts Retrieved Successfully"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Post"
                    }
                }
            }
        },
        "models.ListUserPostsErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ListUserPostsSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Posts Retrieved Successfully"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Post"
                    }
                }
            }
        },
        "models.Post": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Removed from response as per requirement",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "content": {
                    "type": "string",
                    "example": "This is the main content of my post."
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "description": {
                    "type": "string",
                    "example": "A brief description of the post."
                },
                "dislikes": {
                    "type": "integer",
                    "example": 10
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "likes": {
                    "type": "integer",
                    "example": 100
                },
                "sub_title": {
                    "type": "string",
                    "example": "A Catchy Subtitle"
                },
                "title": {
                    "type": "string",
                    "example": "My Awesome Post"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                }
            }
        },
        "models.PostgresHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Postgres Healthy!"
                }
            }
        },
        "models.PostgresUnhealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Postgres Unhealthy!"
                }
            }
        },
        "models.Profile": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "github": {
                    "type": "string",
                    "example": "https://github.com/john_doe"
                },
                "google_scholar": {
                    "type": "string",
                    "example": "https://scholar.google.com/citations?user=xxxxxxxxxxxxx"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "linkedin": {
                    "type": "string",
                    "example": "https://linkedin.com/in/john_doe"
                },
                "twitter": {
                    "type": "string",
                    "example": "https://twitter.com/john_doe"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "website": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "models.RedisHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Redis Healthy!"
                }
            }
        },
        "models.RedisUnhealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Redis Unhealthy!"
                }
            }
        },
        "models.ResendActivationLinkErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ResendActivationLinkPayload": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "john_doe / john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                }
            }
        },
        "models.ResendActivationLinkSuccessResponse": {
            "type": "object",
            "properties": {
                "activation_link": {
                    "type": "string",
                    "example": "http://localhost:8080/api/v1/auth/activate?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg"
                },
                "message": {
                    "type": "string",
                    "example": "Activation Link Sent Successfully"
                }
            }
        },
        "models.ResetPasswordErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ResetPasswordPayload": {
            "type": "object",
            "required": [
                "confirm_password",
                "new_password"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "example": "NewP@$$wOrd"
                },
                "new_password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "NewP@$$wOrd"
                }
            }
        },
        "models.ResetPasswordSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Password Reset Successfully"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Normal User"
                },
                "level": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.RouterHealthyResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Router Healthy!"
                }
            }
        },
        "models.UndislikePostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UndislikePostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Undisliked Successfully"
                }
            }
        },
        "models.UnfollowUserErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UnfollowUserSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Unfollowed Successfully"
                }
            }
        },
        "models.UnlikePostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UnlikePostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Unliked Successfully"
                }
            }
        },
        "models.UpdatePostErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdatePostPayload": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Updated main content of my post."
                },
                "description": {
                    "type": "string",
                    "example": "Updated brief description of the post."
                },
                "sub_title": {
                    "type": "string",
                    "example": "Updated Catchy Subtitle"
                },
                "title": {
                    "type": "string",
                    "example": "Updated Awesome Post"
                }
            }
        },
        "models.UpdatePostSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Post Updated Successfully"
                },
                "post": {
                    "$ref": "#/definitions/models.Post"
                }
            }
        },
        "models.UpdateProfileErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateProfilePayload": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "github": {
                    "type": "string",
                    "example": "https://github.com/john_doe"
                },
                "google_scholar": {
                    "type": "string",
                    "example": "https://scholar.google.com/citations?user=xxxxxxxxxxxxx"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "linkedin": {
                    "type": "string",
                    "example": "https://linkedin.com/in/john_doe"
                },
                "twitter": {
                    "type": "string",
                    "example": "https://twitter.com/john_doe"
                },
                "website": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "models.UpdateProfileSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Profile Updated Successfully"
                },
                "profile": {
                    "$ref": "#/definitions/models.Profile"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "banned": {
                    "type": "boolean",
                    "example": false
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "followers": {
                    "type": "integer"
                },
                "following": {
                    "type": "integer"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_active": {
                    "type": "boolean",
                    "example": false
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "timeout_until": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-25T12:34:01.159498Z"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.UserLoginErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserLoginPayload": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "john_doe / john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                }
            }
        },
        "models.UserLoginSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Logged In Successfully"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.UserLogoutErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User Not Logged In"
                }
            }
        },
        "models.UserLogoutSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logout Successful"
                }
            }
        },
        "models.UserRegisterErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UserRegisterPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8,
                    "example": "P@$$wOrd"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "models.UserRegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "activation_link": {
                    "type": "string",
                    "example": "http://localhost:8080/api/v1/auth/activate?token=xxxxxxxx"
                },
                "message": {
                    "type": "string",
                    "example": "User Registered Successfully"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}