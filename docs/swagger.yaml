basePath: /api/v1
definitions:
  models.ActivateUserErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ActivateUserSuccessResponse:
    properties:
      message:
        example: User Activated Successfully
        type: string
    type: object
  models.CreatePostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.CreatePostPayload:
    properties:
      content:
        example: This is the main content of my post.
        type: string
      description:
        example: A brief description of the post.
        type: string
      sub_title:
        example: A Catchy Subtitle
        type: string
      title:
        example: My Awesome Post
        maxLength: 255
        minLength: 3
        type: string
    required:
    - content
    - title
    type: object
  models.CreatePostSuccessResponse:
    properties:
      message:
        example: Post Created Successfully
        type: string
      post:
        $ref: '#/definitions/models.Post'
    type: object
  models.DeletePostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.DeletePostSuccessResponse:
    properties:
      message:
        example: Post Deleted Successfully
        type: string
    type: object
  models.DislikePostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.DislikePostSuccessResponse:
    properties:
      message:
        example: Post Disliked Successfully
        type: string
    type: object
  models.FollowUserErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.FollowUserSuccessResponse:
    properties:
      message:
        example: User Followed Successfully
        type: string
    type: object
  models.ForgotPasswordErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ForgotPasswordPayload:
    properties:
      identifier:
        example: john_doe / john.doe@example.com
        type: string
    required:
    - identifier
    type: object
  models.ForgotPasswordSuccessResponse:
    properties:
      link:
        example: http://localhost:8080/api/v1/reset-password?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg
        type: string
      message:
        example: Password Reset Link Sent Successfully If User Exists
        type: string
    type: object
  models.GetFollowersErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.GetFollowersSuccessResponse:
    properties:
      followers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        example: Followers Retrieved Successfully
        type: string
    type: object
  models.GetFollowingErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.GetFollowingSuccessResponse:
    properties:
      following:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        example: Following Users Retrieved Successfully
        type: string
    type: object
  models.GetLoggedInUserProfileErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.GetLoggedInUserProfileSuccessResponse:
    properties:
      message:
        example: Profile Retrieved Successfully
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
    type: object
  models.GetPostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.GetPostSuccessResponse:
    properties:
      message:
        example: Post Retrieved Successfully
        type: string
      post:
        $ref: '#/definitions/models.Post'
    type: object
  models.GetUserFollowersErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.GetUserFollowersSuccessResponse:
    properties:
      followers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        example: User Followers Retrieved Successfully
        type: string
    type: object
  models.GetUserFollowingErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.GetUserFollowingSuccessResponse:
    properties:
      following:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        example: User Following Users Retrieved Successfully
        type: string
    type: object
  models.GetUserProfileErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.GetUserProfileSuccessResponse:
    properties:
      message:
        example: Profile Retrieved Successfully
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
    type: object
  models.LikePostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.LikePostSuccessResponse:
    properties:
      message:
        example: Post Liked Successfully
        type: string
    type: object
  models.ListDislikedPostsErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ListDislikedPostsSuccessResponse:
    properties:
      message:
        example: Disliked Posts Retrieved Successfully
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.ListLikedPostsErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ListLikedPostsSuccessResponse:
    properties:
      message:
        example: Liked Posts Retrieved Successfully
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.ListMyPostsErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ListMyPostsSuccessResponse:
    properties:
      message:
        example: User Posts Retrieved Successfully
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.ListUserPostsErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ListUserPostsSuccessResponse:
    properties:
      message:
        example: User Posts Retrieved Successfully
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
    type: object
  models.Post:
    properties:
      author:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Removed from response as per requirement
      content:
        example: This is the main content of my post.
        type: string
      created_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      description:
        example: A brief description of the post.
        type: string
      dislikes:
        example: 10
        type: integer
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      likes:
        example: 100
        type: integer
      sub_title:
        example: A Catchy Subtitle
        type: string
      title:
        example: My Awesome Post
        type: string
      updated_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
    type: object
  models.PostgresHealthyResponse:
    properties:
      status:
        example: Postgres Healthy!
        type: string
    type: object
  models.PostgresUnhealthyResponse:
    properties:
      status:
        example: Postgres Unhealthy!
        type: string
    type: object
  models.Profile:
    properties:
      created_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      first_name:
        example: John
        type: string
      github:
        example: https://github.com/john_doe
        type: string
      google_scholar:
        example: https://scholar.google.com/citations?user=xxxxxxxxxxxxx
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_name:
        example: Doe
        type: string
      linkedin:
        example: https://linkedin.com/in/john_doe
        type: string
      twitter:
        example: https://twitter.com/john_doe
        type: string
      updated_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      website:
        example: https://example.com
        type: string
    type: object
  models.RedisHealthyResponse:
    properties:
      status:
        example: Redis Healthy!
        type: string
    type: object
  models.RedisUnhealthyResponse:
    properties:
      status:
        example: Redis Unhealthy!
        type: string
    type: object
  models.ResendActivationLinkErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ResendActivationLinkPayload:
    properties:
      identifier:
        example: john_doe / john.doe@example.com
        type: string
      password:
        example: P@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
    required:
    - identifier
    - password
    type: object
  models.ResendActivationLinkSuccessResponse:
    properties:
      activation_link:
        example: http://localhost:8080/api/v1/auth/activate?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg
        type: string
      message:
        example: Activation Link Sent Successfully
        type: string
    type: object
  models.ResetPasswordErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ResetPasswordPayload:
    properties:
      confirm_password:
        example: NewP@$$wOrd
        type: string
      new_password:
        example: NewP@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
    required:
    - confirm_password
    - new_password
    type: object
  models.ResetPasswordSuccessResponse:
    properties:
      message:
        example: Password Reset Successfully
        type: string
    type: object
  models.Role:
    properties:
      description:
        example: Normal User
        type: string
      level:
        example: 1
        type: integer
    type: object
  models.RouterHealthyResponse:
    properties:
      status:
        example: Router Healthy!
        type: string
    type: object
  models.UndislikePostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UndislikePostSuccessResponse:
    properties:
      message:
        example: Post Undisliked Successfully
        type: string
    type: object
  models.UnfollowUserErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UnfollowUserSuccessResponse:
    properties:
      message:
        example: User Unfollowed Successfully
        type: string
    type: object
  models.UnlikePostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UnlikePostSuccessResponse:
    properties:
      message:
        example: Post Unliked Successfully
        type: string
    type: object
  models.UpdatePostErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UpdatePostPayload:
    properties:
      content:
        example: Updated main content of my post.
        type: string
      description:
        example: Updated brief description of the post.
        type: string
      sub_title:
        example: Updated Catchy Subtitle
        type: string
      title:
        example: Updated Awesome Post
        type: string
    type: object
  models.UpdatePostSuccessResponse:
    properties:
      message:
        example: Post Updated Successfully
        type: string
      post:
        $ref: '#/definitions/models.Post'
    type: object
  models.UpdateProfileErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UpdateProfilePayload:
    properties:
      first_name:
        example: John
        type: string
      github:
        example: https://github.com/john_doe
        type: string
      google_scholar:
        example: https://scholar.google.com/citations?user=xxxxxxxxxxxxx
        type: string
      last_name:
        example: Doe
        type: string
      linkedin:
        example: https://linkedin.com/in/john_doe
        type: string
      twitter:
        example: https://twitter.com/john_doe
        type: string
      website:
        example: https://example.com
        type: string
    type: object
  models.UpdateProfileSuccessResponse:
    properties:
      message:
        example: Profile Updated Successfully
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
    type: object
  models.User:
    properties:
      banned:
        example: false
        type: boolean
      created_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      followers:
        type: integer
      following:
        type: integer
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: false
        type: boolean
      role:
        $ref: '#/definitions/models.Role'
      timeout_until:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      updated_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  models.UserLoginErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UserLoginPayload:
    properties:
      identifier:
        example: john_doe / john.doe@example.com
        type: string
      password:
        example: P@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
    required:
    - identifier
    - password
    type: object
  models.UserLoginSuccessResponse:
    properties:
      message:
        example: User Logged In Successfully
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.UserLogoutErrorResponse:
    properties:
      message:
        example: User Not Logged In
        type: string
    type: object
  models.UserLogoutSuccessResponse:
    properties:
      message:
        example: Logout Successful
        type: string
    type: object
  models.UserRegisterErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UserRegisterPayload:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: P@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
      username:
        example: john_doe
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserRegisterSuccessResponse:
    properties:
      activation_link:
        example: http://localhost:8080/api/v1/auth/activate?token=xxxxxxxx
        type: string
      message:
        example: User Registered Successfully
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: rohit.vilas.ingole@gmail.com
    name: Rohit Vilas Ingole
  description: This is the API for Gopher Social, a social media platform for Gophers.
  license:
    name: MIT License
    url: https://github.com/DataRohit/Gopher-Social-Backend/blob/master/license
  title: Gopher Social API
  version: "1.0"
paths:
  /auth/activate:
    get:
      description: Activates a user account using the activation token from the query
        parameter.
      parameters:
      - description: Activation Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully activated user account
          schema:
            $ref: '#/definitions/models.ActivateUserSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ActivateUserErrorResponse'
        "401":
          description: Unauthorized - Invalid or expired activation token
          schema:
            $ref: '#/definitions/models.ActivateUserErrorResponse'
        "500":
          description: Internal Server Error - Failed to activate user account
          schema:
            $ref: '#/definitions/models.ActivateUserErrorResponse'
      summary: Activate user account
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiates the forgot password flow by generating a reset link and
        sending it to the user's email if the user exists.
      parameters:
      - description: Request Body for Forgot Password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully initiated forgot password flow
          schema:
            $ref: '#/definitions/models.ForgotPasswordSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ForgotPasswordErrorResponse'
        "500":
          description: Internal Server Error - Failed to initiate forgot password
            flow
          schema:
            $ref: '#/definitions/models.ForgotPasswordErrorResponse'
      summary: Initiate forgot password flow
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in an existing user and returns access and refresh tokens
        as secure cookies.
      parameters:
      - description: Request Body for User Login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/models.UserLoginSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
        "403":
          description: Forbidden - Account not activated
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
        "500":
          description: Internal Server Error - Failed to login user
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      description: Logs out the current user by clearing access and refresh tokens.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/models.UserLogoutSuccessResponse'
        "400":
          description: Bad Request - User not logged in
          schema:
            $ref: '#/definitions/models.UserLogoutErrorResponse'
      summary: Logout user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user to the platform
      parameters:
      - description: Request Body for User Registration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/models.UserRegisterSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UserRegisterErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/models.UserRegisterErrorResponse'
        "500":
          description: Internal Server Error - Failed to register user
          schema:
            $ref: '#/definitions/models.UserRegisterErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/resend-activation-link:
    post:
      consumes:
      - application/json
      description: Resends the activation link to the user's email if the user exists
        and is not already active.
      parameters:
      - description: Request Body for Resending Activation Link
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResendActivationLinkPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully resent activation link
          schema:
            $ref: '#/definitions/models.ResendActivationLinkSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
        "409":
          description: Conflict - User already active
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
        "500":
          description: Internal Server Error - Failed to resend activation link
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
      summary: Resend Activation Link
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password using the provided reset token in query
        parameter.
      parameters:
      - description: Reset Token
        in: query
        name: token
        required: true
        type: string
      - description: Request Body for Reset Password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully reset password
          schema:
            $ref: '#/definitions/models.ResetPasswordSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ResetPasswordErrorResponse'
        "401":
          description: Unauthorized - Invalid or expired reset token
          schema:
            $ref: '#/definitions/models.ResetPasswordErrorResponse'
        "500":
          description: Internal Server Error - Failed to reset password
          schema:
            $ref: '#/definitions/models.ResetPasswordErrorResponse'
      summary: Reset user password
      tags:
      - auth
  /health/postgres:
    get:
      description: Check if Postgres connection is healthy
      produces:
      - application/json
      responses:
        "200":
          description: Successfully connected to Postgres
          schema:
            $ref: '#/definitions/models.PostgresHealthyResponse'
        "503":
          description: Failed to connect to Postgres
          schema:
            $ref: '#/definitions/models.PostgresUnhealthyResponse'
      summary: Postgres Health Check
      tags:
      - health
  /health/redis:
    get:
      description: Check if Redis connection is healthy
      produces:
      - application/json
      responses:
        "200":
          description: Successfully connected to Redis
          schema:
            $ref: '#/definitions/models.RedisHealthyResponse'
        "503":
          description: Failed to connect to Redis
          schema:
            $ref: '#/definitions/models.RedisUnhealthyResponse'
      summary: Redis Health Check
      tags:
      - health
  /health/router:
    get:
      description: Check if the router is working
      produces:
      - application/json
      responses:
        "200":
          description: Successfully connected to router
          schema:
            $ref: '#/definitions/models.RouterHealthyResponse'
      summary: Router Health Check
      tags:
      - health
  /post/{postID}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing post by its ID. Only the author can delete
        the post.
      parameters:
      - description: Post ID to be deleted
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted post
          schema:
            $ref: '#/definitions/models.DeletePostSuccessResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.DeletePostErrorResponse'
        "403":
          description: Forbidden - User is not the author or account is inactive/banned
          schema:
            $ref: '#/definitions/models.DeletePostErrorResponse'
        "404":
          description: Not Found - Post not found
          schema:
            $ref: '#/definitions/models.DeletePostErrorResponse'
        "500":
          description: Internal Server Error - Failed to delete post
          schema:
            $ref: '#/definitions/models.DeletePostErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an existing post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieves a post by its ID. Any logged-in user can access this
        route.
      parameters:
      - description: Post ID to be retrieved
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved post
          schema:
            $ref: '#/definitions/models.GetPostSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.GetPostErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.GetPostErrorResponse'
        "404":
          description: Not Found - Post not found
          schema:
            $ref: '#/definitions/models.GetPostErrorResponse'
        "500":
          description: Internal Server Error - Failed to get post
          schema:
            $ref: '#/definitions/models.GetPostErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Updates an existing post by its ID. Only the author can update
        the post.
      parameters:
      - description: Post ID to be updated
        in: path
        name: postID
        required: true
        type: string
      - description: Request Body for updating a post
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated post
          schema:
            $ref: '#/definitions/models.UpdatePostSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UpdatePostErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.UpdatePostErrorResponse'
        "403":
          description: Forbidden - User is not the author or account is inactive/banned
          schema:
            $ref: '#/definitions/models.UpdatePostErrorResponse'
        "404":
          description: Not Found - Post not found
          schema:
            $ref: '#/definitions/models.UpdatePostErrorResponse'
        "500":
          description: Internal Server Error - Failed to update post
          schema:
            $ref: '#/definitions/models.UpdatePostErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing post
      tags:
      - posts
  /post/{postID}/dislike:
    post:
      consumes:
      - application/json
      description: Allows a logged-in user to dislike a post by post identifier (postID).
      parameters:
      - description: Post Identifier (Post ID)
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully disliked post
          schema:
            $ref: '#/definitions/models.DislikePostSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.DislikePostErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.DislikePostErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.DislikePostErrorResponse'
        "404":
          description: Not Found - Post not found
          schema:
            $ref: '#/definitions/models.DislikePostErrorResponse'
        "409":
          description: Conflict - Already disliked post
          schema:
            $ref: '#/definitions/models.DislikePostErrorResponse'
        "500":
          description: Internal Server Error - Failed to dislike post
          schema:
            $ref: '#/definitions/models.DislikePostErrorResponse'
      security:
      - BearerAuth: []
      summary: Dislike a post
      tags:
      - post_likes
  /post/{postID}/like:
    delete:
      consumes:
      - application/json
      description: Allows a logged-in user to unlike a post by post identifier (postID).
      parameters:
      - description: Post Identifier (Post ID)
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully unliked post
          schema:
            $ref: '#/definitions/models.UnlikePostSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UnlikePostErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.UnlikePostErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.UnlikePostErrorResponse'
        "404":
          description: Not Found - Post not found or like not found
          schema:
            $ref: '#/definitions/models.UnlikePostErrorResponse'
        "500":
          description: Internal Server Error - Failed to unlike post
          schema:
            $ref: '#/definitions/models.UnlikePostErrorResponse'
      security:
      - BearerAuth: []
      summary: Unlike a post
      tags:
      - post_likes
    post:
      consumes:
      - application/json
      description: Allows a logged-in user to like a post by post identifier (postID).
      parameters:
      - description: Post Identifier (Post ID)
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully liked post
          schema:
            $ref: '#/definitions/models.LikePostSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.LikePostErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.LikePostErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.LikePostErrorResponse'
        "404":
          description: Not Found - Post not found
          schema:
            $ref: '#/definitions/models.LikePostErrorResponse'
        "409":
          description: Conflict - Already liked post
          schema:
            $ref: '#/definitions/models.LikePostErrorResponse'
        "500":
          description: Internal Server Error - Failed to like post
          schema:
            $ref: '#/definitions/models.LikePostErrorResponse'
      security:
      - BearerAuth: []
      summary: Like a post
      tags:
      - post_likes
  /post/{postID}/undislike:
    delete:
      consumes:
      - application/json
      description: Allows a logged-in user to undislike a post by post identifier
        (postID).
      parameters:
      - description: Post Identifier (Post ID)
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully undisliked post
          schema:
            $ref: '#/definitions/models.UndislikePostSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UndislikePostErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.UndislikePostErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.UndislikePostErrorResponse'
        "404":
          description: Not Found - Post not found or dislike not found
          schema:
            $ref: '#/definitions/models.UndislikePostErrorResponse'
        "500":
          description: Internal Server Error - Failed to undislike post
          schema:
            $ref: '#/definitions/models.UndislikePostErrorResponse'
      security:
      - BearerAuth: []
      summary: Undislike a post
      tags:
      - post_likes
  /post/create:
    post:
      consumes:
      - application/json
      description: Creates a new post by a logged-in user.
      parameters:
      - description: Request Body for creating a post
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created post
          schema:
            $ref: '#/definitions/models.CreatePostSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.CreatePostErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.CreatePostErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.CreatePostErrorResponse'
        "500":
          description: Internal Server Error - Failed to create post
          schema:
            $ref: '#/definitions/models.CreatePostErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /post/disliked:
    get:
      consumes:
      - application/json
      description: Retrieves a list of posts disliked by the logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of disliked posts
          schema:
            $ref: '#/definitions/models.ListDislikedPostsSuccessResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.ListDislikedPostsErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch disliked posts
          schema:
            $ref: '#/definitions/models.ListDislikedPostsErrorResponse'
      security:
      - BearerAuth: []
      summary: List disliked posts of logged-in user
      tags:
      - post_likes
  /post/liked:
    get:
      consumes:
      - application/json
      description: Retrieves a list of posts liked by the logged-in user.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of liked posts
          schema:
            $ref: '#/definitions/models.ListLikedPostsSuccessResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.ListLikedPostsErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch liked posts
          schema:
            $ref: '#/definitions/models.ListLikedPostsErrorResponse'
      security:
      - BearerAuth: []
      summary: List liked posts of logged-in user
      tags:
      - post_likes
  /post/me:
    get:
      consumes:
      - application/json
      description: Retrieves a list of posts created by the logged-in user.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of user's posts
          schema:
            $ref: '#/definitions/models.ListMyPostsSuccessResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.ListMyPostsErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch user's posts
          schema:
            $ref: '#/definitions/models.ListMyPostsErrorResponse'
      security:
      - BearerAuth: []
      summary: List posts of logged-in user
      tags:
      - posts
  /post/user/{identifier}:
    get:
      consumes:
      - application/json
      description: Retrieves a list of posts created by a user identified by username,
        email, or user ID.
      parameters:
      - description: User Identifier (username, email, or user ID)
        in: path
        name: identifier
        required: true
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of user's posts
          schema:
            $ref: '#/definitions/models.ListUserPostsSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ListUserPostsErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.ListUserPostsErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/models.ListUserPostsErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch user's posts
          schema:
            $ref: '#/definitions/models.ListUserPostsErrorResponse'
      security:
      - BearerAuth: []
      summary: List posts by user identifier
      tags:
      - posts
  /post/user/{identifier}/disliked:
    get:
      consumes:
      - application/json
      description: Retrieves a list of posts disliked by a user, identified by username,
        email, or user ID.
      parameters:
      - description: User Identifier (username, email, or user ID)
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of disliked posts for user
          schema:
            $ref: '#/definitions/models.ListDislikedPostsSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ListDislikedPostsErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.ListDislikedPostsErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/models.ListDislikedPostsErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch disliked posts
          schema:
            $ref: '#/definitions/models.ListDislikedPostsErrorResponse'
      security:
      - BearerAuth: []
      summary: List disliked posts of a user by identifier
      tags:
      - post_likes
  /post/user/{identifier}/liked:
    get:
      consumes:
      - application/json
      description: Retrieves a list of posts liked by a user, identified by username,
        email, or user ID.
      parameters:
      - description: User Identifier (username, email, or user ID)
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of liked posts for user
          schema:
            $ref: '#/definitions/models.ListLikedPostsSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ListLikedPostsErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.ListLikedPostsErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/models.ListLikedPostsErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch liked posts
          schema:
            $ref: '#/definitions/models.ListLikedPostsErrorResponse'
      security:
      - BearerAuth: []
      summary: List liked posts of a user by identifier
      tags:
      - post_likes
  /profile/{identifier}:
    get:
      consumes:
      - application/json
      description: Retrieves the profile of a user by their identifier (username,
        email, or user ID).
      parameters:
      - description: User Identifier (username, email, or user ID)
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved profile
          schema:
            $ref: '#/definitions/models.GetUserProfileSuccessResponse'
        "400":
          description: Bad Request - Invalid identifier format
          schema:
            $ref: '#/definitions/models.GetUserProfileErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.GetUserProfileErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned or requested
            user is banned
          schema:
            $ref: '#/definitions/models.GetUserProfileErrorResponse'
        "404":
          description: Not Found - Profile not found for the given identifier
          schema:
            $ref: '#/definitions/models.GetUserProfileErrorResponse'
        "500":
          description: Internal Server Error - Failed to get profile
          schema:
            $ref: '#/definitions/models.GetUserProfileErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile by identifier
      tags:
      - profile
  /profile/me:
    get:
      consumes:
      - application/json
      description: Retrieves the profile of the currently logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved profile
          schema:
            $ref: '#/definitions/models.GetLoggedInUserProfileSuccessResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.GetLoggedInUserProfileErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.GetLoggedInUserProfileErrorResponse'
        "404":
          description: Not Found - Profile not found for the logged-in user
          schema:
            $ref: '#/definitions/models.GetLoggedInUserProfileErrorResponse'
        "500":
          description: Internal Server Error - Failed to get profile
          schema:
            $ref: '#/definitions/models.GetLoggedInUserProfileErrorResponse'
      security:
      - BearerAuth: []
      summary: Get logged-in user profile
      tags:
      - profile
  /profile/update:
    put:
      consumes:
      - application/json
      description: Updates the profile of the logged-in user.
      parameters:
      - description: Request Body for Profile Update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfilePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated profile
          schema:
            $ref: '#/definitions/models.UpdateProfileSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UpdateProfileErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.UpdateProfileErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.UpdateProfileErrorResponse'
        "500":
          description: Internal Server Error - Failed to update profile
          schema:
            $ref: '#/definitions/models.UpdateProfileErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - profile
  /user/{identifier}/followers:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users who are following the user identified
        by identifier.
      parameters:
      - description: User Identifier (username, email, or user ID) of the user
        in: path
        name: identifier
        required: true
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved followers list for user
          schema:
            $ref: '#/definitions/models.GetUserFollowersSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.GetUserFollowersErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.GetUserFollowersErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/models.GetUserFollowersErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch followers
          schema:
            $ref: '#/definitions/models.GetUserFollowersErrorResponse'
      security:
      - BearerAuth: []
      summary: List followers of a user by identifier
      tags:
      - user_follow
  /user/{identifier}/following:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users that the user identified by identifier
        is following.
      parameters:
      - description: User Identifier (username, email, or user ID) of the user
        in: path
        name: identifier
        required: true
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved following list for user
          schema:
            $ref: '#/definitions/models.GetUserFollowingSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.GetUserFollowingErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.GetUserFollowingErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/models.GetUserFollowingErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch following users
          schema:
            $ref: '#/definitions/models.GetUserFollowingErrorResponse'
      security:
      - BearerAuth: []
      summary: List users being followed by a user by identifier
      tags:
      - user_follow
  /user/follow/{identifier}:
    post:
      consumes:
      - application/json
      description: Allows a logged-in user to follow another user.
      parameters:
      - description: User Identifier (username, email, or user ID) of the followee
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully followed user
          schema:
            $ref: '#/definitions/models.FollowUserSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.FollowUserErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.FollowUserErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.FollowUserErrorResponse'
        "404":
          description: Not Found - Followee user not found
          schema:
            $ref: '#/definitions/models.FollowUserErrorResponse'
        "409":
          description: Conflict - Already following user
          schema:
            $ref: '#/definitions/models.FollowUserErrorResponse'
        "500":
          description: Internal Server Error - Failed to follow user
          schema:
            $ref: '#/definitions/models.FollowUserErrorResponse'
      security:
      - BearerAuth: []
      summary: Follow a user
      tags:
      - user_follow
  /user/followers:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users who are following the logged-in user.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved followers list
          schema:
            $ref: '#/definitions/models.GetFollowersSuccessResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.GetFollowersErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch followers
          schema:
            $ref: '#/definitions/models.GetFollowersErrorResponse'
      security:
      - BearerAuth: []
      summary: List followers of logged-in user
      tags:
      - user_follow
  /user/following:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users that the logged-in user is following.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved following list
          schema:
            $ref: '#/definitions/models.GetFollowingSuccessResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.GetFollowingErrorResponse'
        "500":
          description: Internal Server Error - Failed to fetch following users
          schema:
            $ref: '#/definitions/models.GetFollowingErrorResponse'
      security:
      - BearerAuth: []
      summary: List users being followed by logged-in user
      tags:
      - user_follow
  /user/unfollow/{identifier}:
    delete:
      consumes:
      - application/json
      description: Allows a logged-in user to unfollow another user.
      parameters:
      - description: User Identifier (username, email, or user ID) of the followee
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully unfollowed user
          schema:
            $ref: '#/definitions/models.UnfollowUserSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UnfollowUserErrorResponse'
        "401":
          description: Unauthorized - User not logged in or invalid token
          schema:
            $ref: '#/definitions/models.UnfollowUserErrorResponse'
        "403":
          description: Forbidden - User account is inactive or banned
          schema:
            $ref: '#/definitions/models.UnfollowUserErrorResponse'
        "404":
          description: Not Found - Followee user not found or not following
          schema:
            $ref: '#/definitions/models.UnfollowUserErrorResponse'
        "500":
          description: Internal Server Error - Failed to unfollow user
          schema:
            $ref: '#/definitions/models.UnfollowUserErrorResponse'
      security:
      - BearerAuth: []
      summary: Unfollow a user
      tags:
      - user_follow
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
