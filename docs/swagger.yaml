basePath: /api/v1
definitions:
  models.ActivateUserErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ActivateUserSuccessResponse:
    properties:
      message:
        example: User Activated Successfully.
        type: string
    type: object
  models.ForgotPasswordErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ForgotPasswordPayload:
    properties:
      identifier:
        example: john_doe / john.doe@example.com
        type: string
    required:
    - identifier
    type: object
  models.ForgotPasswordSuccessResponse:
    properties:
      link:
        example: http://localhost:8080/api/v1/reset-password?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg
        type: string
      message:
        example: Password Reset Link Sent Successfully If User Exists.
        type: string
    type: object
  models.PostgresHealthyResponse:
    properties:
      status:
        example: Postgres Healthy!
        type: string
    type: object
  models.PostgresUnhealthyResponse:
    properties:
      status:
        example: Postgres Unhealthy!
        type: string
    type: object
  models.RedisHealthyResponse:
    properties:
      status:
        example: Redis Healthy!
        type: string
    type: object
  models.RedisUnhealthyResponse:
    properties:
      status:
        example: Redis Unhealthy!
        type: string
    type: object
  models.ResendActivationLinkErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ResendActivationLinkPayload:
    properties:
      identifier:
        example: john_doe / john.doe@example.com
        type: string
      password:
        example: P@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
    required:
    - identifier
    - password
    type: object
  models.ResendActivationLinkSuccessResponse:
    properties:
      activation_link:
        example: http://localhost:8080/api/v1/auth/activate?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzc4MDI5ODEsInVzZXJfaWQiOiI1MzAzODI0OS02Yjk4LTQ2YzUtOWQ1YS00ZDdkYjY5MmJiOGMifQ.pxrhavurRWfBlgAYShPnFl7rVcaJn8TsDHM-ZtcuAVg
        type: string
      message:
        example: Activation Link Sent Successfully.
        type: string
    type: object
  models.ResetPasswordErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ResetPasswordPayload:
    properties:
      confirm_password:
        example: NewP@$$wOrd
        type: string
      new_password:
        example: NewP@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
    required:
    - confirm_password
    - new_password
    type: object
  models.ResetPasswordSuccessResponse:
    properties:
      message:
        example: Password Reset Successfully.
        type: string
    type: object
  models.Role:
    properties:
      description:
        example: Normal User
        type: string
      level:
        example: 1
        type: integer
    type: object
  models.RouterHealthyResponse:
    properties:
      status:
        example: Router Healthy!
        type: string
    type: object
  models.User:
    properties:
      banned:
        example: false
        type: boolean
      created_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      followers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      following:
        items:
          $ref: '#/definitions/models.User'
        type: array
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: false
        type: boolean
      role:
        $ref: '#/definitions/models.Role'
      timeout_until:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      updated_at:
        example: "2025-01-25T12:34:01.159498Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  models.UserLoginErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UserLoginPayload:
    properties:
      identifier:
        example: john_doe / john.doe@example.com
        type: string
      password:
        example: P@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
    required:
    - identifier
    - password
    type: object
  models.UserLoginSuccessResponse:
    properties:
      message:
        example: User Logged In Successfully
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.UserLogoutErrorResponse:
    properties:
      message:
        example: User Not Logged In
        type: string
    type: object
  models.UserLogoutSuccessResponse:
    properties:
      message:
        example: Logout Successful
        type: string
    type: object
  models.UserRegisterErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.UserRegisterPayload:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: P@$$wOrd
        maxLength: 64
        minLength: 8
        type: string
      username:
        example: john_doe
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserRegisterSuccessResponse:
    properties:
      activation_link:
        example: http://localhost:8080/api/v1/auth/activate?token=xxxxxxxx
        type: string
      message:
        example: User Registered Successfully
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: rohit.vilas.ingole@gmail.com
    name: Rohit Vilas Ingole
  description: This is the API for Gopher Social, a social media platform for Gophers.
  license:
    name: MIT License
    url: https://github.com/DataRohit/Gopher-Social-Backend/blob/master/license
  title: Gopher Social API
  version: "1.0"
paths:
  /auth/activate:
    get:
      description: Activates a user account using the activation token from the query
        parameter.
      parameters:
      - description: Activation Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully activated user account
          schema:
            $ref: '#/definitions/models.ActivateUserSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ActivateUserErrorResponse'
        "401":
          description: Unauthorized - Invalid or expired activation token
          schema:
            $ref: '#/definitions/models.ActivateUserErrorResponse'
        "500":
          description: Internal Server Error - Failed to activate user account
          schema:
            $ref: '#/definitions/models.ActivateUserErrorResponse'
      summary: Activate user account
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiates the forgot password flow by generating a reset link and
        sending it to the user's email if the user exists.
      parameters:
      - description: Request Body for Forgot Password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully initiated forgot password flow
          schema:
            $ref: '#/definitions/models.ForgotPasswordSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ForgotPasswordErrorResponse'
        "500":
          description: Internal Server Error - Failed to initiate forgot password
            flow
          schema:
            $ref: '#/definitions/models.ForgotPasswordErrorResponse'
      summary: Initiate forgot password flow
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in an existing user and returns access and refresh tokens
        as secure cookies.
      parameters:
      - description: Request Body for User Login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/models.UserLoginSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
        "403":
          description: Forbidden - Account not activated
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
        "500":
          description: Internal Server Error - Failed to login user
          schema:
            $ref: '#/definitions/models.UserLoginErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      description: Logs out the current user by clearing access and refresh tokens.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/models.UserLogoutSuccessResponse'
        "400":
          description: Bad Request - User not logged in
          schema:
            $ref: '#/definitions/models.UserLogoutErrorResponse'
      summary: Logout user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user to the platform
      parameters:
      - description: Request Body for User Registration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/models.UserRegisterSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.UserRegisterErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/models.UserRegisterErrorResponse'
        "500":
          description: Internal Server Error - Failed to register user
          schema:
            $ref: '#/definitions/models.UserRegisterErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/resend-activation-link:
    post:
      consumes:
      - application/json
      description: Resends the activation link to the user's email if the user exists
        and is not already active.
      parameters:
      - description: Request Body for Resending Activation Link
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResendActivationLinkPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully resent activation link
          schema:
            $ref: '#/definitions/models.ResendActivationLinkSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
        "409":
          description: Conflict - User already active
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
        "500":
          description: Internal Server Error - Failed to resend activation link
          schema:
            $ref: '#/definitions/models.ResendActivationLinkErrorResponse'
      summary: Resend Activation Link
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password using the provided reset token in query
        parameter.
      parameters:
      - description: Reset Token
        in: query
        name: token
        required: true
        type: string
      - description: Request Body for Reset Password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully reset password
          schema:
            $ref: '#/definitions/models.ResetPasswordSuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/models.ResetPasswordErrorResponse'
        "401":
          description: Unauthorized - Invalid or expired reset token
          schema:
            $ref: '#/definitions/models.ResetPasswordErrorResponse'
        "500":
          description: Internal Server Error - Failed to reset password
          schema:
            $ref: '#/definitions/models.ResetPasswordErrorResponse'
      summary: Reset user password
      tags:
      - auth
  /health/postgres:
    get:
      description: Check if Postgres connection is healthy
      produces:
      - application/json
      responses:
        "200":
          description: Successfully connected to Postgres
          schema:
            $ref: '#/definitions/models.PostgresHealthyResponse'
        "503":
          description: Failed to connect to Postgres
          schema:
            $ref: '#/definitions/models.PostgresUnhealthyResponse'
      summary: Postgres Health Check
      tags:
      - health
  /health/redis:
    get:
      description: Check if Redis connection is healthy
      produces:
      - application/json
      responses:
        "200":
          description: Successfully connected to Redis
          schema:
            $ref: '#/definitions/models.RedisHealthyResponse'
        "503":
          description: Failed to connect to Redis
          schema:
            $ref: '#/definitions/models.RedisUnhealthyResponse'
      summary: Redis Health Check
      tags:
      - health
  /health/router:
    get:
      description: Check if the router is working
      produces:
      - application/json
      responses:
        "200":
          description: Successfully connected to router
          schema:
            $ref: '#/definitions/models.RouterHealthyResponse'
      summary: Router Health Check
      tags:
      - health
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
